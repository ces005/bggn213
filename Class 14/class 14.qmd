---
title: "Class 14"
author: "Celina Shen (PID: A16673724)"
format: html
editor: visual
---

## Import Data

We need two things "Counts" and "MetaData" (what DESeq calls colData - as it describes the columns in Counts) Counts

```{r}
counts <-read.csv("GSE37704_featurecounts.csv", row.names = 1)
head(counts)
```

MetaData

```{r}
metadata <- read.csv("GSE37704_metadata.csv")
head(metadata)
```

We want the columns in `counts` to match the rows in the `metadata`.

```{r}
colnames(counts)
metadata$id
```

We can get rid of the first column in `counts` to make these match

```{r}
countData <- counts[,-1]
head(countData)
```

```{r}
all(colnames(countData) == metadata$id)
```

```{r}
x <- c(T,F,T,T)
if(all(x)) {
  cat("Me happy")
} else {
  cat("Me no happy")
}
```

## Data Cleanup

## Filter out zero counts

It is standard practice to remove any genes/transcripts that we have no data for - i.e. zero counts in all columns

```{r}
to.keep.inds <- rowSums(countData) > 0
cleanCounts <- countData[to.keep.inds,]
head(cleanCounts)
```

## Setup for DESeq

```{r}
#/ message: false
library(DESeq2)
```

```{r}
dds <- DESeqDataSetFromMatrix(countData = cleanCounts,
                       colData = metadata,
                       design = ~condition)
```

## DESeq

```{r}
dds <- DESeq(dds)
```

## Inspect results

```{r}
res <- results(dds)
head(res)
```

## Data Viz

```{r}
plot(res$log2FoldChange, res$padj)
```

### 

Gene sets DEGs come from experiment pathway genes come from annotations

Functional set databases Most commonly used: Gene Onotology KEGG Pathways GENEGHO Metabses

## Pathway Analysis

```{r}
#/ message
library(gage)
library(gageData)
library(pathview)
```

### Annotation of genes

First I need to translate my Ensemble IDs in my `res` object to Entrez and gene symbol formats.

For this I will use the AnnotationDbi package and its `mapIDs()` function.

```{r}
library(AnnotationDbi)
library(org.Hs.eg.db)
columns(org.Hs.eg.db)
```

Let's map to "SYMBOL", "ENTREZID", "GENENAME" from our "ENSEMBL" ids.

```{r}
res$genome <- mapIds(org.Hs.eg.db,
       keys = rownames(res),
       keytype = "ENSEMBL",
       column = "GENENAME",
)

res$symbol <- mapIds(org.Hs.eg.db,
       keys = rownames(res),
       keytype = "ENSEMBL",
       column = "SYMBOL",
)

res$entrez <- mapIds(org.Hs.eg.db,
       keys = rownames(res),
       keytype = "ENSEMBL",
       column = "ENTREZID",
)

head(res)
```

Before going any further, let's focus on a subset of "top" hits.

We can use as a starting point log2FC of +2/-2 and an adjusted P-value of less than 0.05.

```{r}
top.inds <- (abs(res$log2FoldChange) > 2) & (res$padj < 0.05)
top.inds[is.na(top.inds)] <- FALSE
top.genes <- res[top.inds,]
```

```{r}
c(F, T, T, NA) & c(T, T, F, NA)
```

Let's save our "top genes" to a CSV file...

```{r}
write.csv(top.genes, file = "top_geneset.csv")
```

Now for pathway analysis

```{r}
library(gage)
library(gageData)
library(pathview)
```

```{r}
foldchanges <- res$log2FoldChange
names(foldchanges) <- res$entrez
head(foldchanges)
```

```{r}
data(kegg.sets.hs)
data(sigmet.idx.hs)

keggres <- gage(foldchanges, gsets = kegg.sets.hs)
```

```{r}
attributes(keggres)
```

```{r}
head(keggres$less)
```

hsa04110 cell cycle

```{r}
pathview(foldchanges, pathway.id = "hsa04110")
```

![](hsa04110.pathview.png)

```{r}
data(go.sets.hs)
data(go.subs.hs)

# Focus on Biological Process subset of GO
gobpsets = go.sets.hs[go.subs.hs$BP]

gores <- gage(foldchanges, gsets = gobpsets)
```

```{r}
lapply(gores, head)
```

To run reactome online, we need to make a little text file with a gene id per line.

```{r}
sig_genes <- res[res$padj <= 0.05 & !is.na(res$padj), "symbol"]
print(paste("Total number of significant genes:", length(sig_genes)))
```

```{r}
write.table(sig_genes, file="significant_genes.txt",
            row.names=FALSE,
            col.names=FALSE,
            quote=FALSE)
```

```{r}
head(sig_genes)
```

![](R-HSA-453279.png)
