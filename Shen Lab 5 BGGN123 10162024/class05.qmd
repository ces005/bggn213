---
title: "Class 5: Data Visualization with ggplot"
author: "Celina (PID: A16673724)"
format: html
---

## Class 5 Lab worksheet + in-class activities

R has many ways to make figures, especially graphs. One that comes with *"base" R* is the `plot()` function

```{r}
plot (cars)
```

A very popular package for graphs is called **ggplot2**

Before I can use any add-on package like ggplot2, I must install it with the `install.packages("ggplot2")` command.

Then, load the package using `library(ggplot2)` to use it.

```{r}
library(ggplot2)

ggplot(cars) +
  aes(x=speed, y=dist) +
  geom_point()
```

For simple plots like this one, base R code is much shorter than ggplot code.

Let's make something more complex using ggplot!

```{r}
ggplot(cars) +
  aes(x=speed, y=dist) +
  geom_point() +
  geom_smooth()
```
```{r}
ggplot(cars) +
  aes(x=speed, y=dist) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE)
```

```{r}
ggplot(cars) +
  aes(x=speed, y=dist) +
  geom_point() +
  labs(title = "Speeds vs Stopping distances of cars",
       x = "Speed (MPH)",
       y = "Stopping distance (ft)",
       subtitle = "The greater the speed of the car, the greater the stopping distance!",
       caption = "Dataset: cars") +
  geom_smooth(method = "lm", se = FALSE) +
  theme_bw()
```

Every ggplot has at least 3 layers.

-   **data** (data.frame with the numbers and other features for your plot)
-   **aes**thetics (matching your data columns to your plot)
-   **geom**s (there are many types of geoms; the basics are `geom_point`, `geom_line`, `geom_smooth`)

```{r}
mtcars
```

Let's make a ggplot of the `mtcars` dataset using `mpg` vs `disp` and set the size of the points to the `hp` and set the color to `am`.

```{r}
library(ggrepel)

ggplot(mtcars) +
  aes(x = mpg, y = disp, size = hp, color = am, label = rownames(mtcars)) +
  geom_point() +
  facet_wrap(~am) +
  geom_text_repel()
```

This next part is from the genes dataset:

```{r}
url <- "https://bioboot.github.io/bimm143_S20/class-material/up_down_expression.txt"
genes <- read.delim(url)
head(genes)

total <- nrow(genes)
colnames(genes)
ncol(genes)
table(genes$State)
percents <- (table(genes$State)/total)*100
total
percents

```

```{r}
ggplot(genes) +
  aes(x = Condition1, y = Condition2, color = State) +
  scale_colour_manual(values=c("blue","gray","red")) +
  geom_point() +
  labs(title = "Gene Expression Changes Upon Drug treatment", x = "Control (no drug)", y = "Drug Treatment")
```

Onto the motivated students section!

Use the following function to install the dplyr package: `install.packages("dplyr")`

```{r}
url <- "https://raw.githubusercontent.com/jennybc/gapminder/master/inst/extdata/gapminder.tsv"

gapminder <- read.delim(url)

library(dplyr)

gapminder_2007 <- gapminder %>% filter(year==2007)

```

```{r}
ggplot(gapminder_2007) +
  aes(x=gdpPercap, y=lifeExp, color = continent, size = pop) +
  geom_point(alpha=0.5)

```

```{r}
ggplot(gapminder_2007) +
  aes(x=gdpPercap, y=lifeExp, color = continent, size = pop) +
  geom_point(alpha=0.8)
```

```{r}
ggplot(gapminder_2007) + 
  geom_point(aes(x = gdpPercap, y = lifeExp,
                 size = pop), alpha=0.5) + 
  scale_size_area(max_size = 10)
```

```{r}
gapminder_1957 <- gapminder %>% filter(year==1957)
ggplot(gapminder_1957) +
  aes(x=gdpPercap, y=lifeExp, color = continent, size = pop) +
  scale_size_area(max_size = 15) +
  geom_point(alpha=0.7)
```

Bar charts section:

```{r}
gapminder_top5 <- gapminder %>% 
  filter(year==2007) %>% 
  arrange(desc(pop)) %>% 
  top_n(5, pop)

gapminder_top5
```

```{r}
ggplot(gapminder_top5) + 
  geom_col(aes(x = country, y = pop))
```

```{r}
ggplot(gapminder_top5) +
  aes(x=country, y=pop, fill=gdpPercap) +
  geom_col()
```




